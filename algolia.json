[{"authors":null,"categories":null,"content":"","date":1617498e3,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"term","lang":"en","lastmod":1617498e3,"objectID":"","permalink":"https://codingo.com/tags/beginners/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/beginners/","section":"tags","summary":"","tags":null,"title":"beginners","type":"tags","url":"https://codingo.com/tags/beginners/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"Over time I’ve answered this question a lot, and I’m hoping to build something more canonical I can reference for those starting out with bug bounties - where do you begin? The answer ultimately depends on your foundation, and I’ve aimed to break that down into two distinct answers.\nIf you’re new to security If you’re newer to security, and hacking in general, a hacking foundation is the most important thing to build. If you’re familiar with prior work I’ve written or authored, it’s no secret that I love pentesterlab, and I’m regularly giving vouchers for it away (you can find these hidden in videos). The reasoning for that is simple, I believe it to be the best return on investment for somebody building a foundation in security, who may not have a lot of money they’re willing or able to yet dedicate to the acquisition of knowledge.\nThe building of a foundational experience of hacking is important, but at what point do you have knowledge you can weaponize in a bug bounty program? Often, I hear (and have previously, I believe incorrectly given) the advice that people should start out with CSRF, XSS, or some other easily accessible bug class. I believe that’s a mistake for beginners, for one core reason - it doesn’t help build a foundation in understanding impact, and the connection of impact as it relates to a business.\nSo what is a proposed, better alternative? In my opinion, and it is an opinion, I believe authorisation based vulnerabilities to be the best place to start out as a beginner. There’s a few reasons for that, principally:\n They can’t be easily automated, unlike subdomain takeover type vulnerabilities, or even (to a degree) XSS, authorization based vulnerabilities require interacting with and understanding an application. They’re easily teachable, authorisation based vulnerabilities come in a variety of impacts, but at their most basic are as simple as an unauthenticated user being able to perform an action as if they are authenticated. Furthermore, maybe you can perform a paid users permission, without registering? Maybe you can perform an administrative function as a regular user. The depth and variety of bugs can scale with your ability, and they connect quickly with users who are learning as near as anybody can understand the need for each user to have different permissions. They scale with knowledge, like any bug class, there’s significant depth to these types of vulnerabilities and a variety of technical implementations and mistakes that lead to them. As you learn more about the bug bounty space, your ability to uncover more authorization based issues will expand with your newfound abilities, well grounded in a foundation that you will have built when beginning. They’re typically described in impact, not as a bug class, the biggest mistake most beginners make is thinking in bug classes, not impact. SQL injection is only reportable because of the impact it creates, not because it has the label of SQL Injection. The benefit of authorisation based vulnerabilities is they force you to think about the impact you’re creating, and what it means to the application or business that you’re working on.  So where do you begin? Authorisation bugs, at their simplest tend to begin with the ability to perform an action as if you’re performing it on behalf of another user. I recommend learning the mechanics of how websites authorise a user action through ID’s, cookies, and other flows and then starting to see what happens when you manipulate those items. What happens if you perform an action when authenticated with a session cookie, and then try that same request by removing it? What happens when you see a user ID in a request, and try that same request with another user\u0026rsquo;s ID? Pentesterlab has two good resources for starting to learn more about authentication. Firstly, I recommend starting out with the Essentials Badge. After you’ve mastered the basics through there, take a look at the Authentication/Authorisation badge. A number of the exercises on these videos contain videos, helping you to get started.\nIf you’re an experienced hacker, making a move Assuming you already have a background in hacking, there’s a different approach entirely that you should make when starting out in the bug bounty space. Most people will make the mistake of seeing the number of resources covering reconnaissance (recon), and the tools surrounding it and think that should be where they begin, spending time automating bug classes like subdomain takeovers and the like. Whilst that isn’t bad advice, I don’t think it’s the quickest path to success, and the invested time to a return is high. After all, the public resources for these bug classes are very readily available, and the most valuable items you can perform a takeover on are not included.\nMy advice if you’re experienced is to learn how to perform recon over time, not point in time recon. The difference is simple, recon over time maps an organisation and how it changes, finding what the company is changing, and where new bugs exist. When you have this crafted, do your thing, assuming you can already hack, follow the process and methodology you normally would, and report what you find.\nEssentially, pick an organisation with a healthy scope, map that organisation and review marketing material and other items to work out where they’ve actively worked and what they’re currently changing regularly. Over time, remap that organisation and continue refining and updating your notes to see what else you may want to review - maybe there’s annual or quarterly activities they perform, maybe there’s a customer endpoint that’s regularly being iterated upon. As you identify and map these areas, you’ll find a new/fresh attack surface to work against.\n","date":1617498e3,"description":"","dir":"posts/","expirydate":-62135596800,"fuzzywordcount":1e3,"keywords":null,"kind":"page","lang":"en","lastmod":1617498e3,"objectID":"a802e0c9d6f722de95ec8c35032e3de2","permalink":"https://codingo.com/posts/2021-04-04-bug-classes-starting-out/","publishdate":"2021-04-04T11:00:00+10:00","readingtime":5,"relpermalink":"/posts/2021-04-04-bug-classes-starting-out/","section":"posts","summary":"Over time I’ve answered this question a lot, and I’m hoping to build something more canonical I can reference for those starting out with bug bounties - where do you begin? The answer ultimately depends on your foundation, and I’ve aimed to break that down into two distinct answers.\nIf you’re new to security If you’re newer to security, and hacking in general, a hacking foundation is the most important thing to build.","tags":["beginners","bug","bounty"],"title":"Beginners Bug Bounty - what bug classes should you start with?","type":"posts","url":"https://codingo.com/posts/2021-04-04-bug-classes-starting-out/","weight":0,"wordcount":956},{"authors":null,"categories":null,"content":"","date":1617498e3,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"term","lang":"en","lastmod":1617498e3,"objectID":"","permalink":"https://codingo.com/tags/bounty/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/bounty/","section":"tags","summary":"","tags":null,"title":"bounty","type":"tags","url":"https://codingo.com/tags/bounty/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"","date":1617498e3,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"term","lang":"en","lastmod":1617498e3,"objectID":"","permalink":"https://codingo.com/tags/bug/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/bug/","section":"tags","summary":"","tags":null,"title":"bug","type":"tags","url":"https://codingo.com/tags/bug/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"","date":1617498e3,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"home","lang":"en","lastmod":1617498e3,"objectID":"","permalink":"https://codingo.com/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/","section":"","summary":"","tags":null,"title":"Codingo - Ethical Hacking and Bug Bounty Advice","type":"page","url":"https://codingo.com/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"","date":1617498e3,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":1617498e3,"objectID":"","permalink":"https://codingo.com/posts/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/posts/","section":"posts","summary":"","tags":null,"title":"Posts","type":"posts","url":"https://codingo.com/posts/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"","date":1617498e3,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1617498e3,"objectID":"","permalink":"https://codingo.com/tags/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/","section":"tags","summary":"","tags":null,"title":"Tags","type":"tags","url":"https://codingo.com/tags/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":" ","date":1615556524,"description":"","dir":"security/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":1615556524,"objectID":"b2223d31e2139dafebf3d9dbfa4b7815","permalink":"https://codingo.com/security/","publishdate":"2021-03-12T23:42:04+10:00","readingtime":0,"relpermalink":"/security/","section":"","summary":" ","tags":null,"title":"Codingo's Vulnerability Disclosure Policy","type":"page","url":"https://codingo.com/security/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"","date":1602140518,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1602140518,"objectID":"","permalink":"https://codingo.com/categories/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/","section":"categories","summary":"","tags":null,"title":"Categories","type":"categories","url":"https://codingo.com/categories/","weight":0,"wordcount":0},{"authors":null,"categories":["github"],"content":"Every Month if Hacktoberfest, which, if you\u0026rsquo;re not already familiar with is an event run by Digital Ocean to reward open source contributions with swag (normally a t-shirt and stickers). All in all, it\u0026rsquo;s a very well received event that provides the perfect time to jump into open source, if you haven\u0026rsquo;t already.\nThe intention of this guide is to arm you with the knowledge of how you can get involved, even if you\u0026rsquo;re not entirely familiar with programming, or if you are, and you want a reference point for \u0026ldquo;how to github\u0026rdquo; - I\u0026rsquo;m aiming for this to land with both.\n  Table of Contents  What is Github?  But what is Git?   How do I get started? Visiting a Project (repository) Creating your first project Master and Main Branches Commiting direct to Main Branch Authentication Projects for non-coders  Disclose.io Can-I-Take-Over-XYZ Keyhacks Infosec Community Repositories     What is Github? Glad you asked! Github is self purported to be the worlds leading software development platform. In my own words, it\u0026rsquo;s a programming social network where you can receive the benefit of open source projects others have contributed to, contribute to yourself, or host your own code upon. This isn\u0026rsquo;t just limited to code also, some informational resources can be found here, completely community driven.\nWithout question, Github is the biggest of these platforms and although Gitlab and others exist, the security community has never really gravitated towards them, with the very, very vast majority of projects exisitng on and being powered by Github.\nBut what is Git? Both Github and Gitlab are websites that wrap around git, a version control management system. This is well summarised below however don\u0026rsquo;t worry if some of this seems daunting, as I\u0026rsquo;m aiming to cover the \u0026ldquo;how\u0026rdquo; throughout this guide, leaving you armed with enough information to jump in and get involved.\nHow do I get started? After registering an account and poking around, it\u0026rsquo;s worth understanding a few \u0026ldquo;how to\u0026rdquo; elements of Github. Let\u0026rsquo;s use https://github.com/codingo for examples sake.\nWhen you first visit this, you\u0026rsquo;ll see the following:\nThe \u0026ldquo;pinned\u0026rdquo; section is a summary of repositories that I\u0026rsquo;ve chosen to highlight. A respository is essentially the term used to house git repositories, or version control sytems. If a git repository contains a \u0026ldquo;README.md\u0026rdquo; then that will be displayed when you first open the repository, as shown below:\nAs you can also see, the files within the repository will be shown, along with the latest commit messages against those files (we\u0026rsquo;ll dig into those later), and the date they were last modified. You can also click these, to see what those changes were, and who they were made by. In essence, a repository stores a full history of these files, creating an immutable (to a degree, you can force change if you\u0026rsquo;re the project owner) record of that history, should you need to ever track down the origin of a change, or revert it.\nBack to profiles, you\u0026rsquo;ll also see different elements such as badges, organisations that user belongs to and more. The \u0026ldquo;highlights\u0026rdquo; a user can have come from different activities over Github itself. For example, the \u0026ldquo;Security Bug Bounty Hunter\u0026rdquo; highlight on my profile is one I\u0026rsquo;m particularly proud of, as it shows that I\u0026rsquo;ve found and reported a security issue in Github itself. Likewise, the organisation I work for (Bugcrowd) contributes to the open source space and I\u0026rsquo;ve been invited to that organisation on Github, my affiliation is shown on my profile. All of this to say, you can build your profile out with other actions over Github, beyond just contributing to open source projects.\nVisiting a Project (repository) Moving beyond profiles, you should dig into code repositories. In github, these are fully hosted pages, showing the key information around a repository. If we go to https://github.com/codingo/Interlace, we can break this down further.\nThis repository contains a number of elemnts. Front an centre you\u0026rsquo;ll see the files and folders relating to the project, as well as when they were last updated.\nClicking the descriptions next to these files will show you the details of the \u0026ldquo;commit\u0026rdquo; that description is referring to. Essentially, a commit is a change to a file (sent via a pull request). We\u0026rsquo;ll dig into this more later, but what you need to know about git, and by extension then Github is that every change to a file, folder, or otherwise is stored in a commit and the entire repository is a database of sorts storing the commit history for a project.\nThe power of this commit history is that you can see the full history of a file (this is referred to as \u0026ldquo;git blame\u0026rdquo;, but it doesn\u0026rsquo;t have a negative conotiation as the wording suggests). This means that if you make a mistake, or you want to note when a change occured, you can do it. The other power of git, and its intention, is that this history, stored with the way git merges changes to projects (more on this later also) allows for small and large teams alike to work on the same project in paralell, without getting in each others way (at least, not intentionally!).\nCreating your first project I\u0026rsquo;m going to assume you\u0026rsquo;ve registered a github account, logged in, and want to start with creating your first project. So let\u0026rsquo;s! Firstly, to do that login, and at the profile page, click \u0026ldquo;Repositories\u0026rdquo; (found on the top bar).\nAt the next page, click \u0026ldquo;New\u0026rdquo; and give your repository a name. These will also drive the URL to your project, and it\u0026rsquo;s best to be succinct. You\u0026rsquo;ll also need to provide a description, and assuming you don\u0026rsquo;t have a premium (or student) account on Github, you will need to make a public repository.\nI also suggest initializing the repository with content, the best way I find to do this is to select \u0026ldquo;Add a README file\u0026rdquo;. We\u0026rsquo;ll dig into editing and updating using this file as an example later, so it\u0026rsquo;s best to select this to more easily follow this guide.\nAfter you\u0026rsquo;ve done that, click \u0026ldquo;create repository\u0026rdquo;, and we\u0026rsquo;re off!\nMaster and Main Branches As you create pull requests you\u0026rsquo;re performing work on your own branch, which you then propose to the owners of the repository in a pull request. Essentially, you\u0026rsquo;re saying, \u0026ldquo;Hey, I did this work over here, but the main project should add it as it is good for others\u0026rdquo;.\nThe primary branch that a project works on historically has been referred to as the master branch, however this term has now shifted to referring to this as the main branch, and Github is slowly making steps towards applying this site-wide.\nCommiting direct to Main Branch You can, as the owner of a repository also commit changes directly to the main branch, instead of going through a pull request. This is only recommended for every minor changes, if at all, as every time you do so on a Github project you\u0026rsquo;re also risking a user cloning the repository at a point in time where you have functionally broken or untested code. For that reason, any user who isn\u0026rsquo;t a listed contributor (a permission setting, not literally a contributor) to a repository must go through a pull request to submit changes.\nAuthentication Authentication is key if you\u0026rsquo;re working with Github, and can be found discussed at length here: https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github\nProjects for non-coders Disclose.io The Disclose.io project tracks websites operating disclosure programs, and the terms under whcih they operate. It\u0026rsquo;s community driven, and can be found at: https://github.com/disclose\nCan-I-Take-Over-XYZ The can-i-take-over-xyz list tracks services which are, or aren\u0026rsquo;t vulnerable to subdomain takeover in a discussion type format. You can find it at https://github.com/edoverflow/can-i-take-over-xyz\nKeyhacks The Keyhacks repository tracks safe methods for checking if an API key discovered in a pentester, or Bug Bounty program is valid or not. You can find it at https://github.com/streaak/keyhacks/\nInfosec Community Repositories The Infosec Community Github organisation tracks a number of informational repositories you can contribute to, found here: https://github.com/infosec-community\n","date":1602140518,"description":"","dir":"posts/","expirydate":-62135596800,"fuzzywordcount":1400,"keywords":null,"kind":"page","lang":"en","lastmod":1602140518,"objectID":"8bc2e5371b9f497e0bddbfedc9d164c6","permalink":"https://codingo.com/posts/2020-10-08-github-security-professionals/","publishdate":"2020-10-08T17:01:58+10:00","readingtime":7,"relpermalink":"/posts/2020-10-08-github-security-professionals/","section":"posts","summary":"Every Month if Hacktoberfest, which, if you\u0026rsquo;re not already familiar with is an event run by Digital Ocean to reward open source contributions with swag (normally a t-shirt and stickers). All in all, it\u0026rsquo;s a very well received event that provides the perfect time to jump into open source, if you haven\u0026rsquo;t already.\nThe intention of this guide is to arm you with the knowledge of how you can get involved, even if you\u0026rsquo;re not entirely familiar with programming, or if you are, and you want a reference point for \u0026ldquo;how to github\u0026rdquo; - I\u0026rsquo;m aiming for this to land with both.","tags":null,"title":"Contributing to Github for Information Security Professionals","type":"posts","url":"https://codingo.com/posts/2020-10-08-github-security-professionals/","weight":0,"wordcount":1329},{"authors":null,"categories":null,"content":"","date":1602140518,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"term","lang":"en","lastmod":1602140518,"objectID":"","permalink":"https://codingo.com/categories/github/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/github/","section":"categories","summary":"","tags":null,"title":"github","type":"categories","url":"https://codingo.com/categories/github/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"","date":1600326118,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"term","lang":"en","lastmod":1600326118,"objectID":"","permalink":"https://codingo.com/categories/bounty/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/bounty/","section":"categories","summary":"","tags":null,"title":"bounty","type":"categories","url":"https://codingo.com/categories/bounty/","weight":0,"wordcount":0},{"authors":null,"categories":["tools","ffuf","bounty"],"content":"Summary This guide is a large summary of the information security tool, FFUF. This is also paired with a video companion guide, shown below:\n   Table of Contents  Other Sources / Credit Before we start What is FFUF, and What is it used for?  Who What Where Why Command Line Driven Applications   Installation  Install from Source Upgrading from Source Kali Linux APT Repositories Other Locations - Debian Unstable / SNAP, etc'   Basic Usage  What is Directory Brute Forcing? What is a Wordlist?  What is SecLists? What Wordlists should I start with?   Your first Directory Brute Force   Recursion Extensions Fuzzing Multiple Locations  Wordlist Parameter Bug   Handling Authentication  Cookie Based Authentication Header Based Authentication More Complex Authentication Flows   Threads Using Silent Mode for Passing Results Error Handling and Scan Tweaks  Automatically Calibrate Filtering Custom Automatic Calibration Filtering Immediately Stop on Error Case Stop on Spurious Errors   Request Throttling and Delays  Delay Between Requests Limited Max Requests/second   Match Options  Match on Response Code Match on Regular Expression   Filter and Matches Sending FFUF scans via Burp Suite  Locally, Using Replay Proxy Using an Interface Remote VPS Traffic via a Reply Proxy   Advanced Wordlist Usage  Clusterbomb Pitchfork   Handling Output  Standard Output  InsiderPHD Tool   HTML Output Using Silent and Tee   Importing Requests Contributing to this guide  Contributors      Other Sources / Credit Understandably, putting this guide and the associated video content together has taken quite a long time (in the order of months, as it\u0026rsquo;s my first steps into video). Throughout that time some other great creators have put out other content, I heavily recommend watching. This content has inspired this project further, and I don\u0026rsquo;t think it would be what it is without their input. Notably, and a video I recommend watching in addition to my own for a more complete picture is Katie Paxton-Fear\u0026rsquo;s How to Use FFUF YouTube video.\n\nAlso, a shoutout to Jason Haddix, STÖK, hakluke, InsiderPHD, and Joohoi for helping answer my numerous questions and being a soundboard as I pulled this together.\n Before we start This guide is a reference point for using a web application security tool, FFUF. If you have a passion for this space, but the guide seems daunting, that doesn\u0026rsquo;t mean you can\u0026rsquo;t do this, it just means there\u0026rsquo;s some prerequisites to dive into first.\nA great starting point is:\nHealth Adams - Linux for Ethical Hackers which will help you to understand the fundamentals of what\u0026rsquo;s happening here in the terminal, which should allow you to then make use of this guide.\nIn addition I also recommend Heath\u0026rsquo;s other content, available on their YouTube channel and I also recommend InsiderPHD\u0026rsquo;s content as a very good starting point.\nOther notable creators well worth watching on your hacking journey include (but certainly aren\u0026rsquo;t limited to):\n Jason Haddix and his streams for more tooling insight. LiveOverflow for amazing insights into just how deep this rabbit hole can go Farah Hawa for a variety of hacking guides aimed at beginners The XSS Rat for a range of content from CTF\u0026rsquo;s to thought process STÖK for the best hacking community orientated content around, and by far the coolest / well centred creator to learn from. TomNomNom because learning to quit vim is vital, and you may learn some other tricks along the way Hakluke for direction on mindset, how to approach bug bounties, and industry insights.  And many more, that I\u0026rsquo;m sure to have missed, but not intentionally. I love you all.\n What is FFUF, and What is it used for? Who Being an open source project, FFUF is maintained by the community however notably, it\u0026rsquo;s founder and principal maintainer, joohoi puts countless hours into driving the project forward. If you FFUF useful, you can support the work here: https://github.com/sponsors/joohoi\nWhat Firstly, the \u0026ldquo;what\u0026rdquo; is quite important. FFUF, or \u0026ldquo;Fuzz Faster you Fool\u0026rdquo; is an open source web fuzzing tool, intended for discovering elements and content within web applications, or web servers. What do we mean by this? Often when you visit a website you will be presented with the content that the owner of the website wants to serve you with, this could be hosted at a page such as index.php. Within security, often the challenges in a website that need to be corrected exist outside of that. For example, the owner of the website may have content hosted at admin.php, that you both want to know about, and test. FFUF is a tool for uncovering those items, for your purusal.\nWhere FFUF is maintained as public open source, and can be found at: https://github.com/ffuf/ffuf\nThis means anybody who wishes to contribute to FFUF, can, provided the maintainer (joohoi) accepts and \u0026ldquo;merges\u0026rdquo; the contributed changes back to the main project.\nWhy Particularly in the bug bounty scene, a lot of people have gravitated towards FFUF since its release. Whilst a good majority of this shift is likely down to the following of the crowd, there is a definite portion of the community who have made the change due to FFUF\u0026rsquo;s speed, flexibility, and ability to quickly integrate into outside tooling. In addition, the maintenance of the project is top notch, especially when compared to compeitive offerings which although similar in features, lack the same passion and speed to market of new features that FFUF has consistenty shown. All of these things considered, FFUF is a mainstay in any toolkit, and this guide aims to emphasize why that should be, and will likely continue to be the case.\nCommand Line Driven Applications FFUF is a command line driven application that runs in the Linux Terminal, or the Windows Command Prompt, meaning that it doesn\u0026rsquo;t contain an interactive GUI, and is instead powered by inputted command line flags. Whilst this may seem more limiting at first, this lends itself to a higher degree of flexibility as you can make full usage of the tool over remote servers, as well as \u0026ldquo;pipe\u0026rdquo; (pass to / from) into and out of FFUF with other command line driven tools. This may feel limiting at first, however I encourage you to follow through this guide to make the most of FFUF, and as you become a more advanced user, you will be able to make the most of this flexibility.\nOften, you\u0026rsquo;ll hear FFUF compared to tools such as dirb, or dirbuster, which whilst true at a certain level, isn\u0026rsquo;t a very fair comparison. Whilst FFUF can be used to perform directory brute forcing it\u0026rsquo;s true power lies in its flexibility, and a better comparison tool for FFUF should be made against something like Burp Suite Intruder, or Turbo Intruder. We\u0026rsquo;ll aim to cover that flexiblity further throughout this guide.\n Installation Install from Source If you wish to install the latest stable build from the main branch of the ffuf project, you can do so with:\n1  go get github.com/ffuf/ffuf   After installing, ffuf will be available in ~/go/bin/ffuf.\nUpgrading from Source Much like compiling from source, upgrading from source is not much more complicated, with the only change being the addition of the -u flag. Upgrading from source should be done with:\n1  go get -u github.com/ffuf/ffuf    Kali Linux APT Repositories If you\u0026rsquo;re using Kali Linux you\u0026rsquo;ll find FFUF in the apt repositories, allowing you to install by running sudo apt-get install ffuf, this will present an output similar to the following:\nAfter installation, you can verify the version installed by using:\n1  ffuf -V   If you also installed from source you\u0026rsquo;ll note that the version you\u0026rsquo;re operating is not the same as the version in your $GOPATH (~/go/bin). APT builds are normally older, but considered more stable builds of applications however can be less feature rich because of this.\nOther Locations - Debian Unstable / SNAP, etc' As it becomes more widely used, more ways to install FFUF are becoming available. FFUF currently flows into Debian Unstable, in addition to some flavours of Ubuntu who use those source. It\u0026rsquo;s also available in the Fedora official repositories, and a SNAP integration is currently underway as well.\n Basic Usage What is Directory Brute Forcing? At its core, one of the main functions that people use FFUF for, is directory brute forcing. With that in mind, let\u0026rsquo;s fuzz! Without passing custom values (covered later in this course), FFUF will replace the value of FUZZ with the value of your wordlist.\nWhat is a Wordlist? What\u0026rsquo;s a wordlist? A wordlist is essentially a list of items in a text file, seperated by lines, that are tailor built around a purpose.\nOne of the best collections of wordlists, is SecLists. Curated by g0tm1lk, jhaddix and Daniel Miessler this collection has a wordlist for every occasion.\nWhat is SecLists? SecLists is managed on Github, so anyone can contribute to these lists and with such an active and well known repository, this leads to a flurry of beneficial contributions. To date, over 100 people have contributed to SecLists, with no sign of it slowing. As you further build in your Security knowledge, if you\u0026rsquo;ve made the most of SecLists I recommend aiming to give back, through a contribution, or by supporting Daniel, the project owner, through Github Sponsers, here: https://github.com/sponsors/danielmiessler.\nWhat Wordlists should I start with? If you\u0026rsquo;re getting started in security, and you\u0026rsquo;re unsure where to start with wordlists, a good/safe collection of lists are the discovery wordlists in SecLists, specifically:\n https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/directory-list-2.3-small.txt https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/directory-list-2.3-medium.txt https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/directory-list-2.3-big.txt  As you progress in your journey, be sure to revisit this and look into tooling and workflow changes that allow you to both use more tailored wordlists for the asset that you\u0026rsquo;re approaching, as well as build custom wordlists around a target as you wish to get more information from it.\nYour first Directory Brute Force For this example, let\u0026rsquo;s create a simple wordlist. In this case, we\u0026rsquo;ll put the following items into it:\n1 2 3 4  test test1 admin panel   Save this in the same location where you intend to run FFUF from, as wordlist.txt.\nFor this example, we\u0026rsquo;ll also brute force against this website, codingo.io. FFUF takes two basic arguments that we need to use here, the first, -u is the target URL (in this case, codingo.io). The second, is -w, which is the path to the wordlist file(s) that we wish to make use of. You can specify multiple wordlists in a comma delimited list, if you so require. We also need to put the word FUZZ where we want our wordlist items to be placed. In this case, we\u0026rsquo;re aiming to brute force for new directories, so we put this after the URL.\nPutting this altogether, the command for our first directory brute force will be:\n1  ffuf -u https://codingo.io/FUZZ -w ./wordlist.txt   When we run this, we should receive similar to the following:\nNote that from our three results, one has come back with a result. In this case, it\u0026rsquo;s come back with a 301 response code, which indicates a redirect is present here. As none of the other endpoints responded with this, instead opting for a 404 page not found response (which we don\u0026rsquo;t have set to match and display), we should investigate this. Doing so, shows the following:\nCongratulations! You\u0026rsquo;ve just brute forced a website and discovered your first endpoint that isn\u0026rsquo;t present from the main page itself.\n Recursion Recursion is essentially performing the same task again, but in this context, at another layer. For example, in our item above, we identified an admin panel, but what if we want to scan further under that? One method, could be to scan again, but by changing our URL and fuzzing endpoint to the following:\n1  ffuf -u https://codingo.io/admin/FUZZ -w ./wordlist.txt   Now whilst this will acheive our goal, it doesn\u0026rsquo;t scale well. When bug hunting, we may find 20, 30, or even 100 directories, all which we want to explore at another level.\nEnter, recursion. By setting the flag recursion we tell FFUF to take our scan, and apply another layer to it. A second flag, recursion-depth tells FFUF how many times to perform this action (for example, if we find another layer under admin, shoud we proceed to another layer or stop?). There are some caveats, however. In FFUF you can\u0026rsquo;t use customer fuzzing keywords with recursion, and you\u0026rsquo;re limited to the use of FFUF. Whilst this won\u0026rsquo;t matter for the vast array of applications it will limit usage when using pitchfork scanning modes, which we\u0026rsquo;ll cover later. This isn\u0026rsquo;t a significant issue, however, and just something to take a mental note of for future reference.\nWhen we run this command again, but with the recursion flag, we can see the following:\n1  ffuf -u https://codingo.io/FUZZ -w ./wordlist -recursion   In this case, both items \u0026ldquo;admin\u0026rdquo; and a subpage under that \u0026ldquo;panel\u0026rdquo; were discovered.\n Extensions Often when you find a directorty you\u0026rsquo;re also going to want to look for file extensions of that. This can be invaluable for finding bugs when there\u0026rsquo;s a zip file, or backup file of the same name.\nExtensions in FFUF are specified with the e parameter and are essentially suffixs to your wordlist (as not all extensions start with a .). For example, expanding upon our original scan with the following:\n1  ffuf -u https://codingo.io/FUZZ -w ./wordlist -recursion -e .bak   This now presents new hits! As shown below:\n Fuzzing Multiple Locations By default, FFUF will only look for a single location to fuzz, donate by the term FUZZ. Reviewing our original example, this was the approach taken to FUZZ the directory name:\n1  ffuf -u https://codingo.io/FUZZ -w ./wordlist.txt   But what if we want to fuzz multiple locations? This can be acomplished by comining the ability to define what a fuzz location would be with a wordlist, as well as using multiple wordlists.\nFor example, in the following we\u0026rsquo;re using the term W1 to fuzz our location, instead of FUZZ:\n1  ffuf -u https://codingo.io/W1 -w ./wordlist.txt:W1   This runs the same scan as our previous example, except W1 is now our insert instead of FUZZ. Now, let\u0026rsquo;s assume that instead of codingo.io we had identified multiple websites we wanted to check over at the same time. For that, we could create a wordlist of all of the domains we wanted to test, and use the following:\n1  ffuf -u https://W2/W1 -w ./wordlist.txt:W1,./domains.txt:W2   This would scan each of the domains in our domains.txt files using the wordlist from wordlist.txt, allowing us to run at scale without needing the use of outside scripting or applications.\nThe order of the wordlists control in what order the requests are sent. In clusterbomb mode (default) ffuf will iterate over the entire first wordlist before moving on to the second item in the second wordlist.\nWhy does this matter you wonder? Let me give you an example:\nLets say we have a wordlist with 1000 domains domains.txt and a wordlist with 1000 directories wordlist.txt.\nIf we run:\n1  ffuf -u https://FUZZDOMAIN/FUZZDIR -w ./wordlist.txt:FUZZDIR,./domains.txt:FUZZDOMAIN   ffuf will try every directory for the first domain, then every directory on the second domain. When running with many threads, this means sending 1000 requests to the same server in a very short amount of time. This often leads to getting rate-limited or banned.\nIf we on the other hand swap the order of the wordlists and run:\n1  ffuf -u https://FUZZDOMAIN/FUZZDIR -w ./domains.txt:FUZZDOMAIN,./wordlist.txt:FUZZDIR    ffuf will try the first directory on all domains, before moving on to the next directory and trying that on all domains. This way you can send more requests without overloading the target servers.\nWordlist Parameter Bug In older versions of FFUF there is a bug here whereby the w flag needs to be made use of multiple times for this to work as intended. If you receive the error:\nEncountered error(s): 1 errors occurred. * Keyword W1, defined, but not found in headers, method, URL or POST data. Then you should instead either upgrade FFUF to the latest version, or use the w flag multiple times, like so:\n1  ffuf -u https://W2/W1 -w ./wordlist.txt:W1 -w ./domains.txt:W2   More information can be found here: https://github.com/ffuf/ffuf/issues/290\n Handling Authentication Cookie Based Authentication Often when performing a scan you will want to brute force behind an authentication point. In order to do this, FFUF provides the b flag for you to pas cookie data. These aren\u0026rsquo;t limited to authentication based cookies, and any area of the cookie (from names to values) can also be fuzzed with a wordlist for additional discovery.\nHeader Based Authentication If authentication for the application is via HTTP header-based authentication then the H flag should be used. As with the b flag, this can be used to pass or fuzz any headers, and not just for passing required elements for authentication.\nIn addition to authentication, or fuzzing points, the H flag can also be utilised in situations where you\u0026rsquo;re required to \u0026ldquo;call your shot\u0026rdquo; by specifying a custom header for a client, or Bug Bounty engagement, so the defensive teams of those organisations can identify your traffic.\nMore Complex Authentication Flows Occasionally, you\u0026rsquo;ll come accross authentication flows or fuzzing situations Burp Suite can\u0026rsquo;t provide. In those cases, I suggest creating an additional interface in Burp Suite and making use of Burp Suite Macros to acomplish this. Instructions for doing so can be found further on within this guide.\n Threads By default FFUF will use 40 threads to execute. Essentially, this means that FFUF will start 40 seperate processes to execute the commands that you\u0026rsquo;ve provided. It may be tempting to set this much higher, but this will be limited by the power of your system, and the destination system you\u0026rsquo;re scanning against. If you\u0026rsquo;re in a network environment, such as HackTheBox, or OSCP then setting this higher may not pose much of an issue. If, however, you\u0026rsquo;re working on a production system over the internet then you are likely better off spending time tailoring the flags you\u0026rsquo;re passing to FFUF, and keeping your thread count lower, than trying to acheive a quicker result merely with raw thread count. Various flags you can use to better tailor your requests can be found further throughout this guide.  Using Silent Mode for Passing Results By default FFUF will strip colour from results (unless you enable it with the -c flag). This makes results easy to pass to other application, for additional work. One challenge here, is the header information, essentially:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  /\u0026#39;___\\ /\u0026#39;___\\  /\u0026#39;___\\  /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\  \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\  \\ \\_\\  \\ \\____/ \\ \\_\\  \\/_/ \\/_/ \\/___/ \\/_/  v1.0.2   :: Method : GET :: URL : https://codingo.io/FUZZ :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403 ________________________________________________\n  and the footer:\n1  :: Progress: [3/3] :: Job [1/1] :: 0 req/sec :: Duration: [0:00:10] :: Errors: 0 ::   To remove this, and only show results that line up with the matcher filters, you can use the silent flag, -s. This flag will enforce only successful hits to be shown. For example, our command from earlier, if exapnded with -s becomes:\n1  ffuf -u https://codingo.io/FUZZ -w ./wordlist.txt -s   Which will then only show the result:\nadmin As that responds with a 301 request, which is within our matcher filters.\n Error Handling and Scan Tweaks Automatically Calibrate Filtering The ac flag in FFUF can be used to automatically calibrate filtering of requests. This flag tells FFUF to send a number of preflight checks before brute forcing begins and to quantify common elements of those requests for further filtering. For example, FFUF may send random strings, and if each of those responses were a 200 response code, with a common content length, then that content length would be automatically filtered from future results.\nCustom Automatic Calibration Filtering In addition to the ac flag, FFUF allows you to provide the seed request to build autocalibration against, instead of using pre-flight checks. A good example where this shines, is with Virtual Host Scanning. When checking for Virtual Hosts (VHosts), you are seeking responses that don\u0026rsquo;t match the host request. If we were to do that with acc, we could use the following:\n1  ffuf -w vhostnames.txt -u https://target -H \u0026#34;Host: FUZZ. target\u0026#34; -acc \u0026#34;www\u0026#34;   This would send a preflight check to our target to capture the content-length and response code of www, and then highlight only responses which have a different content length that return from our wordlist. This greatly helps to eliminate false positives, and in these types of cases is more accurate than ac which would use random strings to capture the response, and is unlikely to be as accurate for this type of (and other types of) fuzzing activity.\nImmediately Stop on Error Case FFUF can force stop once an error is received, using the sa flag. This overrules any of the other error condition flags (se and sf) as their thresholds would never be met.\nStop on Spurious Errors FFUF has a flag to allow jobs to automatically stop when a percentage of the recent requests have thrown an error. This flag is se, and will end the job if the last 50 requests have thrown a 403 response code 95% of the time, or if 20% of the responses have been a 429 response code. This can be safer than the flag sf, which will only stop if a portion of the entire request pool have errored, and not just recent requests. These limits may change over time, and are referenced here, should you wish to manually review them: https://github.com/ffuf/ffuf/blob/master/pkg/ffuf/job.go#L382-L407\n Request Throttling and Delays With production hosts, or under various testing conditions you will need to throttle your responses. When these conditions are required, FFUF provides a number of options.\nDelay Between Requests The p flag specifies the seconds of delay between requests. This can be a range, or a set figure. For example, a p value of 2 would enforce a 2 second delay between each request, whilst a p value of 0.1-2.0 would enforce a random delay between 0.1-2 seconds.\nLimited Max Requests/second As FFUF is a multi threaded application, you can easily end up overwealming a destination target with too many requests. In order to control this, you can specify a maximum number of requests that can be sent per second. This can be set with the -rate flag. For example, if you wish to limit to 2 requests per second, then you would specify -rate 2.\n Match Options Match on Response Code There are a variety of predescribed matching options in FFUF, the most common one that you\u0026rsquo;ll find yourself using is mc, which matches the response code. In many cases, you\u0026rsquo;ll want to change this to limit to only 200 requests, to help isolate the results to content that you\u0026rsquo;re seeking.\nMatch on Regular Expression In some cases, however, you may be fuzzing for more complex bugs and want to filter based on a regular expression. For example, if you\u0026rsquo;re filtering for a path traversal bug you may wish to pass a value of -mr \u0026quot;root:\u0026quot; to FFUF to only identify successful responses that indicate a successful retreival of /etc/passwd. Such cases are quite common, and highlight some of the power that FFUF brings into fuzzing that competitive offerings are not yet able to match.\n Filter and Matches As useful as matches are, filters being the inverse of matches can be just as, if not more useful. When returning the results of a page that has a sink (a location where your source, or wordlist item is reflected in the page) within the response, it can be more useful to filter the number of words in a page, rather than filter by content length. For this purpose, FFUF provides fw, or filter words. If you can identify the number of words commonly in the response, you can apply this filter to remove any results that have your content length. If words aren\u0026rsquo;t specific enough, you can also filter on the number of lines within the HTTP response, using fl.\nMuch like filters, you can also filter based on content length (fc) to remove response types from the results. This can be especially useful where you want to first filter for all defaults, which includes the 301 response code, and then filter this response code out from the results to see more specific responses.\n Sending FFUF scans via Burp Suite For a variety of reasons, you\u0026rsquo;ll often find yourself wanting your FFUF scans to be sent via Burp Suite. Notably, there\u0026rsquo;s a few ways to acomplish this goal, and it\u0026rsquo;s important to understand each of them, and apply the right one for your use case.\nLocally, Using Replay Proxy FFUF has a command within it, replay-proxy to dictate. This will retoute successful commands (ones that hit your matches, and not your filters) to Burp Suite proxy for further investigation. Notably, this does mean that you\u0026rsquo;re doubling your requests, and this should be used in situations where it makes sense to do so.\nIf for whatever reason (such as engagement terms) you need to send all information via Burp Suite, and not just successful traffic, then you can instead use x which will replay all requests via a Burp Suite project, regardless of whether they line up with FFUF filters/matches or not.\nUsing an Interface Occasionally, you\u0026rsquo;ll encounter situations where you need all of your FFUF (or another tools) traffic to be send via Burp Suite over a Burp Suite Interface. This could be due to engagement logging (required by the firm you\u0026rsquo;re testing for/against), or due to a complex authentication schema that Burp Suite is better positioned to handle. Personally, I\u0026rsquo;ve also found this useful for fuzzing various elements (such as CSRF tokens) in conjunction with Burp Suite Macros. Whatever the use case, the method for doing this is quite simple. Firstly, we need to go to Burp Suite and setup a second interface, you can do this under proxy-\u0026gt;options-\u0026gt;add\nUnder binding, set a port, for the second interface I prefer to use 8181 (as 8080 is the default and I find this easy to recall).\nUnder the request handling flag, set \u0026ldquo;Redirect to host\u0026rdquo; and \u0026ldquo;Redirect to port\u0026rdquo; to match that of our destination target:\nAfter we\u0026rsquo;ve done that, leave other settings the same and click ok. We can then target https://127.0.0.1:8181 with any of our tools, including FFUF, and it will automatically redirect to the destination target. This means, instead of using http://target.com/path/FUZZ in FFUF to focus on our target, we can use https://127.0.0.1:8181/path/FUZZ. Everything will work as it did before, except the requests are being sent to, and out from Burp Suite.\nBe cautious when using this approach on large wordlists, as Burp Suite will store the history within your associated project, and passing large fuzzes via Burp Suite is likely to cause your project file to become bloated, and unwieldy quickly.\nRemote VPS Traffic via a Reply Proxy When using a remote VPS you\u0026rsquo;ll occasionally hit decisions in your testing that would be aided by using a local version of Burp Suite. To help aid in this, when fuzzing with FFUF you can open a reverse SSH tunnel and combine it with reply-proxy on your remote VPS to replay it over the remote port, to your local Burp Suite instance.\nFirst connect to your remote VPS over SSH server using:\n1  ssh -R 8888:localhost:8080 user@remotevps   And then run FFUF with the following:\n1  ~/go/bin/ffuf -u http://codingo.io/FUZZ -w ./wordlist -replay-proxy http://127.0.0.1:8888   Since we bound port 8888 to relay over our reverse SSH tunnel to our remote burp instance, on port 8080, this will then replay back in Burp Suite.\n Advanced Wordlist Usage When using multiple wordlists, FFUF has two modes of operation. The first, and the default, is clusterbomb. This takes both wordlists and tries all possible combinations of them, and is best for brute forcing operations. By default FFUF will use the clusterbomb attack mode, however you can specify other modes (for now, just pitchfork and clusterbomb) using the mode flag.\nFor example, let\u0026rsquo;s assume we had a wordlist called \u0026ldquo;users\u0026rdquo;, with two users, \u0026ldquo;codingo\u0026rdquo; and \u0026ldquo;anonymous\u0026rdquo;. In addition, we\u0026rsquo;ll assume we have a wordlist \u0026ldquo;passwords\u0026rdquo;, with two items, \u0026ldquo;hunter1\u0026rdquo;, and \u0026ldquo;password\u0026rdquo;. In clusterbomb mode, all combinations of these would be tried, resulting in the following output.\nAlternatively, FFUF provides another mode called \u0026ldquo;pitchfork\u0026rdquo;. This mode is intended for when you want to use wordlists in series. For example, let\u0026rsquo;s assume that you have a list of passwords, that go with a list of users and want to fuzz via a username and parameter endpoint. In this example, the password \u0026ldquo;hunter1\u0026rdquo;, would be tried with the user \u0026ldquo;codingo\u0026rdquo;, and the password \u0026ldquo;password\u0026rdquo; would be tried with the user \u0026ldquo;anoymous\u0026rdquo;, however that would be the end of the operation, and further combinations would not be tried.\nEach has its own use cases, and it\u0026rsquo;s important to know how to use both, however if you\u0026rsquo;re unsure which to use, it\u0026rsquo;s best to stick with the default, clusterbomb.\nClusterbomb Most useful for a brute-force attack style, the clusterbomb will try all combinations of payloads. As Burp Suite Intruder operates with the same kind of wordlist approaches, I\u0026rsquo;ve found this is best explained by Sjord, here. To paraphrase Sjord, essentially the clusterbomb tries all possible combinations, while still keeping the first payload set in the first position and the second payload set in the second position. As shown in the following example:\nHere we can see that the first payload position is used in position one, 456. And the second, in postion two, \u0026lt;br. The first payload is then rotated, whilst the second isn\u0026rsquo;t, until the first list has been exhausted at which time the second list continues through the same operation. Operating in this style ensures that all possible permutations are tested.\nPitchfork Much like the Clusterbomb approach, I\u0026rsquo;ve found the Pitchfork style of fuzzing is also best explained by Sjord, here. To paraphase, the pitchfork attack type uses one payload set for each position. It places the first payload in the first position, the second payload in the second position, and so on. This attack type is useful if you have data items that belong together. For example, you have usernames with corresponding passwords and want to know whether they work with this web application.\nAs you can see when compared to the clusterbomb atack, the pitchfork attack works the wordlists in series. Not all combinations will be reached, but the use case for these is that they aren\u0026rsquo;t intended to and doing so would be a waste of requests.\n Handling Output HTML Output Using Silent and Tee If you want to print results only, without all of the padding, the s flag, or silent mode, works great for this. For example:\n1  ffuf -request /tmp/request.txt -w ./wordlist.txt -s   With our original example, will only output admin, as it\u0026rsquo;s the only successful match. This can also be useful to pass to other tools, however when doing so I suggest also using tee. The tee command will output the results to console, whilst also redirecting it as stdout, allowing other applications to consume it. For example, the following:\n1  ffuf -request /tmp/request.txt -w ./wordlist.txt -s | tee ./output.txt   Would output to the console and write to output.txt. This is a useful trick for a number of tools, including those that don\u0026rsquo;t stream output, to allow you to see results in realtime, whilst also streaming them to a file.\n Importing Requests On of the easiest ways to work with complex queries is to simply save the request you\u0026rsquo;re working with from your intercepting proxy (such as Burp Suite), set your fuzzing paths, and then import it into FFUF for usage. You can do this with the request flag in FFUF, as explained below.\nGoing back to our original fuzzing example, let\u0026rsquo;s assume we visited codingo.io in Burp Suite, and we captured the following request:\nWe can right click in the request, and select Copy to File:\nBe sure not to select Save item as that will save this in a format known only to Burp Suite, and not of use to FFUF.\nOnce we\u0026rsquo;ve saved the file, we then need to open it in our favorite editor, and add our fuzzing points. For this example, I want to brute force items at the top level of the codingo.io domain and so I\u0026rsquo;m adding FUZZ on the top line, as shown below:\nWe can then open our request in FFUF, and instead of passing cookie information or a URL, we can use request to feed it the information in our saved request. In this case, this would look like the following:\n1  ffuf -request /tmp/request.txt -w ./wordlist.txt    Contributing to this guide This guide is open source, maintained on Github. If you\u0026rsquo;d like to contribute to this guide, or to make a correction, you can do so here: https://github.com/codingo/codingo.github.io\nContributors The following authors have contributed to this guide:\n   Date Contributor Twitter Description     17 Sep 2020 codingo https://twitter.com/codingo_ Initial Draft / Publication   28 Sep 2020 p4fg N/A Added additional hints on fuzzing multiple domains     d0zMOQpSawchaptHNMQAvMtgz7dPHHvs\n","date":1600326118,"description":"","dir":"posts/","expirydate":-62135596800,"fuzzywordcount":5600,"keywords":null,"kind":"page","lang":"en","lastmod":1600326118,"objectID":"e5289a69d93000df9f10b39edc896aca","permalink":"https://codingo.com/posts/2020-08-29-everything-you-need-to-know-about-ffuf/","publishdate":"2020-09-17T17:01:58+10:00","readingtime":26,"relpermalink":"/posts/2020-08-29-everything-you-need-to-know-about-ffuf/","section":"posts","summary":"Summary This guide is a large summary of the information security tool, FFUF. This is also paired with a video companion guide, shown below:\n   Table of Contents  Other Sources / Credit Before we start What is FFUF, and What is it used for?  Who What Where Why Command Line Driven Applications   Installation  Install from Source Upgrading from Source Kali Linux APT Repositories Other Locations - Debian Unstable / SNAP, etc'   Basic Usage  What is Directory Brute Forcing?","tags":null,"title":"Everything you need to know about FFUF","type":"posts","url":"https://codingo.com/posts/2020-08-29-everything-you-need-to-know-about-ffuf/","weight":0,"wordcount":5533},{"authors":null,"categories":null,"content":"","date":1600326118,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"term","lang":"en","lastmod":1600326118,"objectID":"","permalink":"https://codingo.com/categories/ffuf/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/ffuf/","section":"categories","summary":"","tags":null,"title":"ffuf","type":"categories","url":"https://codingo.com/categories/ffuf/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"","date":1600326118,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"term","lang":"en","lastmod":1600326118,"objectID":"","permalink":"https://codingo.com/categories/tools/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/tools/","section":"categories","summary":"","tags":null,"title":"tools","type":"categories","url":"https://codingo.com/categories/tools/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"","date":1500966118,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"term","lang":"en","lastmod":1500966118,"objectID":"","permalink":"https://codingo.com/tags/ctf/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/ctf/","section":"tags","summary":"","tags":null,"title":"ctf","type":"tags","url":"https://codingo.com/tags/ctf/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"What is Cracknet? As a part of the SecTalks May CTF I built a .Net reverse engineering challenge, Cracknet. I\u0026rsquo;ve since made this available on Github, here.\nAlthough it\u0026rsquo;s possible to complete this challenge by bypassing a JMP instruction in assembly the intention of this challenge was to introduce participants to decompiling .Net applications by patching the application.\nExploring CrackNet functionality When you first open CrackNet you\u0026rsquo;re presented with the following:\nWhen you enter a guess you\u0026rsquo;ll be presented with either the flag, or told it\u0026rsquo;s incorrect and then presented with a countdown until you can make another guess:\nThis wait time eliminates the ability to brute force the flag and after five incorrect guesses you\u0026rsquo;ll hear a quick mario tune (if system speaker is enabled) and be presented with the following:\nDecompiling with dnSpy Why and what is dnSpy? C# is a \u0026ldquo;jittable\u0026rdquo; langauge in that it\u0026rsquo;s not compiled purely down to machine code like C is, however it\u0026rsquo;s also not completely interpretted like Python is. C# holds the middle ground and source code written is compiled into an intermediate language (IL) according to the CLI specification. When a C# program is executed, the assembly is loaded into the CLR, then, if all security requirements are met, the CLR performs just in time (JIT) compilation to convert the IL code to native machine instructions.\nThis brings in a fantistic Github project - dnSpy. dnSpy is a tool to reverse engineer .NET assemblies from their CLI state back to somewhat interprettable and editable code. It includes a decompiler, a debugger and an assembly editor that allows you to modify or debug .Net applications as required. It\u0026rsquo;s important to note that this code isn\u0026rsquo;t perfect as it\u0026rsquo;s a representation post-compilation from Visual Studio. Redundant blocks in many cases won\u0026rsquo;t be present and program flow and variables will be represented differently. To get a full picture of this you can compare the decompiled version of Cracknet with the source code hosted on Github.\nLoading the project After cloning the dnSpy repository and opening the project you will be presented with something similar to the following:\nNavigate to main We then want to navigate to the main entry point of our application so we can understand what\u0026rsquo;s happening:\nPatching the application Looking at the code we can see that the instruction for decrypting the flag can only be reached by entering the result of the decryption (the flag). At this point we could take the Crypto class in this project along with the AES key and create a new application for our flag reveal however it\u0026rsquo;s far more ideal if we instead patch our binary to bypass the if conditional and show the flag early. To do this we first need to select Edit Method in dnSpy (found in the right click menu):\nWe can then relocate our key decrytion to the beginning of the method and comment out the remaining code. If we only move the key decryption and don\u0026rsquo;t comment out the remaining code our key will be overwritten as the screen is redrawn for the timer.\nThe relevant patched code is as follows:\nstatic void Main(string[] args) { Debug.WriteLine(\u0026#34;flag{Not a real flag. Strings would be too easy\u0026#34;); Program.PrintBanner(); //int guesses = 5;  Console.WriteLine(string.Format(\u0026#34;Success! Flag: {0}!\u0026#34;, Crypto.DecryptStringAES(\u0026#34;EAAAAB+ljfnegBraKanx/SJLBfrGhIDfffz8MOc922hrm0aK44KwgXmu9GHrIU+LjyBwmQ==\u0026#34;))); /*\twhile (true) { bool flag = guesses \u0026lt; 1; if (flag) { Program.PrintGameOver(); } Program.PrintTimer(3); Program.PrintGuesses(guesses); Console.Write(\u0026#34;Enter password: \u0026#34;); string input = Console.ReadLine(); string password = Crypto.DecryptStringAES(\u0026#34;EAAAAOkz8XiBpPhe0j3CnxGt4D5Qb0H2vh9/IeXrt1w4r313\u0026#34;); bool flag2 = input != null \u0026amp;\u0026amp; input.ToLower().Equals(password); if (flag2) { Console.WriteLine(string.Format(\u0026#34;Success! Flag: {0}!\u0026#34;, Crypto.DecryptStringAES(\u0026#34;EAAAAB+ljfnegBraKanx/SJLBfrGhIDfffz8MOc922hrm0aK44KwgXmu9GHrIU+LjyBwmQ==\u0026#34;))); Program.StarWars(); Environment.Exit(0); } int num = guesses; guesses = num - 1; Console.WriteLine(\u0026#34;Incorrect! Please wait to try again.\u0026#34;); Console.Beep(350, 250); Console.Beep(300, 500); } */ .. remainder redacted .. Debug and reveal the flag We then run our patched application within dnSpy to reveal the flag:\nAnd wala!\n","date":1500966118,"description":"","dir":"posts/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1500966118,"objectID":"d82e9b0bc200b4fb2e46e916d1955784","permalink":"https://codingo.com/posts/2017-07-25-decompiling-csharp-by-example-with-cracknet/","publishdate":"2017-07-25T17:01:58+10:00","readingtime":3,"relpermalink":"/posts/2017-07-25-decompiling-csharp-by-example-with-cracknet/","section":"posts","summary":"What is Cracknet? As a part of the SecTalks May CTF I built a .Net reverse engineering challenge, Cracknet. I\u0026rsquo;ve since made this available on Github, here.\nAlthough it\u0026rsquo;s possible to complete this challenge by bypassing a JMP instruction in assembly the intention of this challenge was to introduce participants to decompiling .Net applications by patching the application.\nExploring CrackNet functionality When you first open CrackNet you\u0026rsquo;re presented with the following:","tags":["reverse-engineering","ctf"],"title":"Decompiling C# by Example with Cracknet","type":"posts","url":"https://codingo.com/posts/2017-07-25-decompiling-csharp-by-example-with-cracknet/","weight":0,"wordcount":636},{"authors":null,"categories":null,"content":"","date":1500966118,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"term","lang":"en","lastmod":1500966118,"objectID":"","permalink":"https://codingo.com/tags/reverse-engineering/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/reverse-engineering/","section":"tags","summary":"","tags":null,"title":"reverse-engineering","type":"tags","url":"https://codingo.com/tags/reverse-engineering/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"","date":1488957058,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"term","lang":"en","lastmod":1488957058,"objectID":"","permalink":"https://codingo.com/tags/crikeycon/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/crikeycon/","section":"tags","summary":"","tags":null,"title":"crikeycon","type":"tags","url":"https://codingo.com/tags/crikeycon/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"","date":1488957058,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"term","lang":"en","lastmod":1488957058,"objectID":"","permalink":"https://codingo.com/tags/programming/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/programming/","section":"tags","summary":"","tags":null,"title":"programming","type":"tags","url":"https://codingo.com/tags/programming/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"","date":1488957058,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"term","lang":"en","lastmod":1488957058,"objectID":"","permalink":"https://codingo.com/categories/tutorial/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/tutorial/","section":"categories","summary":"","tags":null,"title":"tutorial","type":"categories","url":"https://codingo.com/categories/tutorial/","weight":0,"wordcount":0},{"authors":null,"categories":"tutorial","content":"Category: Coding Points: 400 Solves: 7 Description: ctf.crikeycon.com:43981 Enumeration Before doing anything else on the host since we were provided with an unual port and address I attempted to ncat to it, receiving the following:\nIdentifying the core problem Since the math is impossible there’s likely a trick here. With that in mind I figure we need to overload an operator (integer overflow) and try passing a large number as input:\nAwesome! Our integer overloads by wrapping around. To gather a bit more information I also tried an integer underflow:\nThe same result. I now had to identify the figure we wrap around. These numbers are a bit irritatingly long to work with so I tried something a bit smaller to see if I could something more manageable:\nWe can use the following to identify our overflow point:\n4294967296 is exactly 2^32, which is 1 beyond the maximum supported by unsigned int (32 bits), further supporting our case that this is an integer overflow exercise.\nTo validate this, I should be able to pass this value to any problem and receive 0 back as a response (as it will reach the signed amount and loop back once), as follows:\nFor the remainder of this exercise I’m going to refer to the variables from our second-last screenshot as the following:\nSince our number wraparounds we now know we need a number with the following conditions:\n Our overflow must be lower than 4294967296 but higher than our destination to pass the first condition. Our overflow needs to exceed 4294967296 when multiplied by the multiplier and result in the destination  Calculating the correct overflow As a reminder, we can calculate our overflow using the formula from earlier:\nI turned this into a proof of concept by generating a new ncat session, which asked the following:\nSolve for X, where: X \u0026gt; 37864 X * 8 = 37864 To generate our answer, I used the following:\npython -c \u0026#39;print((2**32+destination)/multiplier)\u0026#39; This generated the answer of 536875645 as follows:\nUnder some circumstances, we would then be able to pipe our answer into a new ncat session but since our variables change on each connection we need to do this manually to verify it’s correct:\nSuccess! Our flag was revealed.\nCreating an automatic answer tool Manual answers are great, but this is classified as a coding challenge, not a mathematical one!\nThere are a few core processes to this part of the exercise. First is forming an open connection and identifying our destination and multiplier from the data that comes back. We’ve also been asked in the banner of our connection to limit our calculations to 4 bytes, so we’ll make sure we limit what we request at a time.\nSplitting our variables out of the calculation is quite easy. They’re both present on the line reflected as:\nWe can use regular expressions to identify this packet stream from the equals sign, and then split our values out into capture groups using another expression. Putting this boilerplate together looks like the following:\n#!/usr/bin/python3 import socket import re import operator import sys MAXBUF = 4096 SENTINEL = \u0026#39;flag\u0026#39; CTF_BOT = (\u0026#39;ctf.crikeycon.com\u0026#39;, 43981) if __name__ == \u0026#39;__main__\u0026#39;: client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect(CTF_BOT) while True: data = b\u0026#39;\u0026#39; # receive and store data while True: chunk = client.recv(MAXBUF) data += chunk if len(chunk) \u0026lt; MAXBUF: break # store decoded data for future usage decoded = data.decode(\u0026#39;utf-8\u0026#39;) # print out response packet print(decoded) # our flag contains flag{}, once it\u0026#39;s revealed print received data and exit if SENTINEL in decoded: break # skip loop until we see our X * Y = Z line if not re.search(\u0026#39;[=]\u0026#39;, decoded): continue # select integers and store into capture groups match = re.search(\u0026#39;(\\d+) = (\\d+)\u0026#39;, decoded) print(\u0026#39;multiplier: \u0026#39; + match.group(1)) print(\u0026#39;destination: \u0026#39; + match.group(2)) Great! We now have what we need in a variable. Referring back to our formula above, we now need to calculate:\nThis will look like the following (note that we cast our regular expressions back to integers to prevent operand exceptions):\nmultiplier = int(match.group(1)) destination = int(match.group(2)) overflow = int((2**32+destination) / multiplier) Final Script Putting it all together we receive the following:\n#!/usr/bin/python3 import socket import re import operator import sys MAXBUF = 4096 SENTINEL = \u0026#39;flag\u0026#39; CTF_BOT = (\u0026#39;ctf.crikeycon.com\u0026#39;, 43981) if __name__ == \u0026#39;__main__\u0026#39;: client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect(CTF_BOT) while True: data = b\u0026#39;\u0026#39; # receive and store data while True: chunk = client.recv(MAXBUF) data += chunk if len(chunk) \u0026lt; MAXBUF: break # store decoded data for future usage decoded = data.decode(\u0026#39;utf-8\u0026#39;) # print out response packet print(decoded) # our flag contains flag{}, once it\u0026#39;s revealed print recevied data and exit if SENTINEL in decoded: break # skip loop until we see our X * Y = Z line if not re.search(\u0026#39;[=]\u0026#39;, decoded): continue # select integers and store into capture groups match = re.search(\u0026#39;(\\d+) = (\\d+)\u0026#39;, decoded) multiplier = int(match.group(1)) destination = int(match.group(2)) overflow = int((2**32+destination) / multiplier) # encode and transfer client.send(str(overflow).encode(\u0026#39;utf-8\u0026#39;)+ b\u0026#39;\\n\u0026#39;) Success!\nI hope this helped you to better understand integer overflows. If you\u0026rsquo;re Brisbane based, or find yourself here be sure to check out SecTalks.\n","date":1488957058,"description":"","dir":"posts/","expirydate":-62135596800,"fuzzywordcount":900,"keywords":null,"kind":"page","lang":"en","lastmod":1488957058,"objectID":"e0057f5f03e31d6febf491934d876bd0","permalink":"https://codingo.com/posts/2017-03-08-ctf-writeup-crikeycon-2017-impossiblemath/","publishdate":"2017-03-08T17:10:58+10:00","readingtime":4,"relpermalink":"/posts/2017-03-08-ctf-writeup-crikeycon-2017-impossiblemath/","section":"posts","summary":"Category: Coding Points: 400 Solves: 7 Description: ctf.crikeycon.com:43981 Enumeration Before doing anything else on the host since we were provided with an unual port and address I attempted to ncat to it, receiving the following:\nIdentifying the core problem Since the math is impossible there’s likely a trick here. With that in mind I figure we need to overload an operator (integer overflow) and try passing a large number as input:","tags":["ctf","writeup","programming","crikeycon"],"title":"Understanding Integer Overflows - CrikeyCon 2017, Impossible Math Writeup","type":"posts","url":"https://codingo.com/posts/2017-03-08-ctf-writeup-crikeycon-2017-impossiblemath/","weight":0,"wordcount":851},{"authors":null,"categories":null,"content":"","date":1488957058,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"term","lang":"en","lastmod":1488957058,"objectID":"","permalink":"https://codingo.com/tags/writeup/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/writeup/","section":"tags","summary":"","tags":null,"title":"writeup","type":"tags","url":"https://codingo.com/tags/writeup/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"","date":1488956518,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"term","lang":"en","lastmod":1488956518,"objectID":"","permalink":"https://codingo.com/categories/coding/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/coding/","section":"categories","summary":"","tags":null,"title":"coding","type":"categories","url":"https://codingo.com/categories/coding/","weight":0,"wordcount":0},{"authors":null,"categories":["coding"],"content":"Category: Coding Points: 300 Solves: 14 Description: crikeyconctf.dook.biz:23776 Enumeration Before doing anything else on this host I attempted to connect to it, receiving the following:\nThe time between being presented with the challenge and receiving a timeout was a mere two seconds. Although handy with a calculator this wouldn’t be possible without a script/bot. I also noted that the response and timing to answer didn’t change on a second connection, but the base operator did. I then felt comfortable writing a script to connect to the host and return an answer to basic math questions (+-/*).\nFirst Answer Script Attempt I put together a bot which would connect to the host and parse the challenge question using regex so it could answer it using an expression. This resulted in the following:\n#!/usr/bin/python3 import socket import re import operator MAXBUF = 4096 SENTINEL = \u0026#39;flag\u0026#39; CTF_BOT = (\u0026#39;crikeyconctf.dook.biz\u0026#39;, 23776) if __name__ == \u0026#39;__main__\u0026#39;: client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect(CTF_BOT) while True: data = b\u0026#39;\u0026#39; # receive and store data while True: chunk = client.recv(MAXBUF) data += chunk if len(chunk) \u0026lt; MAXBUF: break # store decoded data for future usage decoded = data.decode(\u0026#39;utf-8\u0026#39;) #temporary print(decoded) # # our flag likely contains flag{}, once it\u0026#39;s revealed print received data and exit if SENTINEL in decoded: print(decoded) break match = re.search(\u0026#39;[^\\:\\s]\\d+.{3}\\d+\u0026#39;, decoded) if not match: raise ValueError(\u0026#34;Invalid expression string\u0026#34;) expression = match.group(0) # properly handle division if \u0026#39;/\u0026#39; in expression: expression = expression.replace(\u0026#39;/\u0026#39;, \u0026#39;//\u0026#39;) result = eval(expression) # print results to screen to see script progress print(expression + \u0026#39; = \u0026#39; + str(result)) # encode and transfer data = str(result).encode(\u0026#39;utf-8\u0026#39;) + b\u0026#39;\\n\u0026#39; print(\u0026#39;Sending: \u0026#39; + str(result)) client.send(data) Regular Expression (attempt) The most important line here was the regex which consisted of the following (see if you can spot the mistake!):\nmatch = re.search(\u0026#39;[^\\:\\s]\\d+.{3}\\d+\u0026#39;, decoded) This would skip everything proceeding the colon and whitespace and then group both sets of numbers, and the whitespace/operator between them for evaluation.\nThe response to this was the following:\nI spent far more time on this part of the challenge than I care to admit. I didn’t entirely read my logs and spent my time stuck on the two lines where I have Sending 1766845 and the response 459060 is not correct and put a lot of focus into trying to identify why a different response was being sent to what was calculated (not the truth, but it’s what I was thinking).\nAdding further regular expressions to catch x=x Eventually I identified that the response to an answer was:\nAnswerProvided is correct AnswerProvided = AnswerProvided And then the next question would be presented. This was causing issues with my regex as I was passing values from the previous answer into my group, ultimately preventing the correct evaluation from sending.\nI resolved this by continuing back to the beginning of my loop if there wasn’t a mathematical operator in my decoded string, putting this after the sentinel check as I didn’t want to miss my flag (which likely wouldn’t contain an operator). This looked like the following:\nif not re.search(\u0026#39;[-+/*]\u0026#39;, decoded): continue Updating regular expression to handle more than one digit This got me to question number 10 – at which point I realized that my regex from earlier:\nmatch = re.search(\u0026#39;[^\\:\\s]\\d+.{3}\\d+\u0026#39;, decoded) Would only work if I were to be presented with a single digit question. I updated this to the following:\nmatch = re.search(\u0026#39;[^\\:\\s]\\d+\\d+.{3}\\d+\u0026#39;, decoded) Essentially the same as above, but it would now capture two digits over one as I didn’t expect the challenges to go past 99 (although could use \\d* if they were to).\nFlag Reveal After making the changes above and letting the bot run for fifty questions I was then rewarded with the flag (redacted):\nSuccess!\nI hope this helped you to better understand how to approach this kind of programming based ctf item. If you\u0026rsquo;re Brisbane based, or find yourself here be sure to check out SecTalks.\n","date":1488956518,"description":"","dir":"posts/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":1488956518,"objectID":"e335b9b51d00b1521fda4e7c7afbfd2e","permalink":"https://codingo.com/posts/2017-03-08-crikeycon-2017-fastmath/","publishdate":"2017-03-08T17:01:58+10:00","readingtime":4,"relpermalink":"/posts/2017-03-08-crikeycon-2017-fastmath/","section":"posts","summary":"Category: Coding Points: 300 Solves: 14 Description: crikeyconctf.dook.biz:23776 Enumeration Before doing anything else on this host I attempted to connect to it, receiving the following:\nThe time between being presented with the challenge and receiving a timeout was a mere two seconds. Although handy with a calculator this wouldn’t be possible without a script/bot. I also noted that the response and timing to answer didn’t change on a second connection, but the base operator did.","tags":["ctf","writeup","programming","crikeycon"],"title":"CrikeyCon 2017 - Fast Math Writeup","type":"posts","url":"https://codingo.com/posts/2017-03-08-crikeycon-2017-fastmath/","weight":0,"wordcount":654},{"authors":null,"categories":null,"content":"","date":1411887718,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"term","lang":"en","lastmod":1411887718,"objectID":"","permalink":"https://codingo.com/tags/bitcoin/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/bitcoin/","section":"tags","summary":"","tags":null,"title":"bitcoin","type":"tags","url":"https://codingo.com/tags/bitcoin/","weight":0,"wordcount":0},{"authors":null,"categories":null,"content":"What is Arbitrage? Put simply, arbitrage is buying something at a low price and selling more or less immediately at a higher price through a different market. There are many kinds of arbitrage, but all of them boil more or less to the same goal: Capitalizing on a price difference for economic gain.\nArbitrage is everywhere in our global economy and lots of commercial transactions depend upon it and utilize it. Goods are produced at a reduced cost in one place and are sold at a higher cost someplace else. The important thing is that the differences in price allows us to recoup the costs of the transaction; i.e. packaging, transportation, management, etc. For our discussion we will be referring to the arbitrage between cryptocurrencies between exchanges and other markets.\nWhy does it happen? The reasons for arbitrage are many and opportunities are created every day. Globally, it can be said that these profit windows open due to market inefficiencies and perhaps that’s the best way to put it since the work of many arbitrageurs decreases the profitability of arbitraging, benefiting the market as a whole.\nRemember that Arbitrage depends on opportunities and these are not a plentiful resource; it is safe to say that arbitrageurs compete for these opportunities to capitalize on them when possible.\nIs it hard? Arbitrage requires both skill and strategic thought. While “simple” arbitrage situations, like buying goods at a farm to sell them at a market may not be the most shining examples, they still require some skill to manage them profitably. Also – remember that an arbitrageur’s worst enemy is another arbitrageur.\nThis is a game that begins with observation and measurement of the market as the arbitrageur must, at all times, be observant of the price difference in the goods he intends to acquire and sell. The markets move and what was an opportunity before can become quite the opposite in the future; an arbitrageur must hedge the risks he or she takes while doing their business.\nArbitrage in the Bitcoin Economy Certainly there’s room for arbitrage with Bitcoin, but hold your enthusiasm; the golden age of bitcoin arbitrage has ended long ago. In 2014, there are no 30 percent ROI opportunities like in the MtGox days. The essence of current arbitrage remains the same, but the opportunities however are different.\nA quick scan of currency arbitrage in the Cryptsy and Poloniex exchanges, as of September 17 2014 at 02:03 GMT yields three potential opportunities. Let’s analyze them.\nOpportunity 1: Buy a Hunter Coin (HUC) at Cryptsy and sell it for BTC at Poloniex. Profit: 0.00000065 BTC. Margin: 3.96%.\nYes, that’s it – 65 satoshis. That’s 0.0003010475 of a dollar. At this rate you would need 3321 opportunities like this to earn a single dollar.\nOpportunity 2: Buy a ProtoShare (PTS) on Poloniex and sell it for BTC at Cryptsy. Profit: 0.00000001 BTC\nIn this scenario you would need 215 thousand “opportunities” to make a single dollar.\nOpportunity 3: Buy an Execoin (EXE) on Poloniex and sell it on Cryptsy. Profit: 0.02293949 BTC. Margin: 11.32%.\nThis is a fine opportunity indeed; at current exchange rates this is 10.64 USD of money earned in a supposedly risk-free transaction.\nHowever, in the strict academic sense, there’s no arbitrage here. Why? Well, for one, there’s risk. You might not have the coins needed to trade in Poloniex and while you send them over the opportunity might disappear. Every cryptocoin movement between wallets takes time and good opportunities won’t last long. This is the first risk of cryptocurrency arbitrage.\nGood arbitrageurs know this and use faster coins to move funds from exchange to exchange. The risk might be less, but it’s a risk nonetheless; while the world of Wall Street’s arbitrage happens in the miliseconds, in the world of cryptocurrencies it happens over minutes of waiting for transaction verification.\nNow stop and think about how poor this is. Cryptsy is one of the exchanges with the most trading combinations – otherwise known as pairs – available, it has 298; placing it fifth overall. In addition it handles a very large transaction volume of 1117 BTC daily. This makes it one of the most attractive places to be conducting crypto-arbitrage, as there are hundreds of users trading the numerous alt-coins it supports. Still, there is over half a million dollars in trades going on, but only one true opportunity available – measuring in at just $10\nAlmost two hours later, at 05:45, the opportunity is still intact. What happened? Why not just go and take it? Now we come to the second risk of bitcoin arbitrage: Exchange withdrawal issues.\nThis is another layer of danger which inexperienced users usually overlook when thinking about arbitrage. Simply put, the exchanges withhold the right – at least Cryptsy does – of doing whatever they want with their withdrawal services. Let’s travel back in time to March 18 2014, where a young curious would-be arbitrageur scanned an opportunity and was willing to try it.\nThe scenario: Buy InfiniteCoin at Cryptsy, then sell it. The wannabe did as the program said, and sent his precious bitcoin to the exchange; where he bought the InfiniteCoin he needed, with every fee already taken care of in his calculations. He wrote a destination address, then he clicked on “Withdraw”.\nIFC had a block time of 30 seconds – that meant the transaction is supposed to take that amount of time to be confirmed. The amateur arbitrageur waited 30 seconds, and he began thinking that it must be some administrative issue.\n60 seconds passed, and he kept thinking the same; two hours passed, and he emailed support.\n“Oh, hello Cryptsy? InfiniteCoin withdrawals are taking infinite time. ”\nThree hours later they replied saying the withdrawal was at last being processed.\nBy then though the arbitrage opportunity was lost. However, the story doesn’t end here. Twelve days later, and after several support tickets, the coins were at last transferred. Not only did the opportunity of profit pass, but the coins were more or less worthless by the time they were traded.\nExperienced arbitrageurs already know this, in these cases the arbitrage opportunity is inexistent. How do they know? Well, to shed some light on it, sometimes the price is low not because the sellers are mis-pricing it, but because the exchange is broken, and they want their money out.\nSo how do you do bitcoin arbitrage? There are many ways to do arbitrage with bitcoin, and other crypto-currencies, and they depend on several questions:\n Will I have to move my currency between exchanges or are they already there? Will I trade a single pair or several? Which currency will I end up with? Dollars? Bitcoins? Something else?  Let’s take a look at the first question. While it is easy to imagine buying at a discount on one place and selling at a premium on another, it is not as intuitive to think about already having your funds there. This is our first arbitraging method.\nMethod 1: Waiting with coins This method requires you to have the same amount of the coin you’re buying in the market you’re selling, and performing the trade as simultaneously as possible; back in the example above, it would’ve meant having enough Execoin ready to sell, while having enough Bitcoins to buy it too. Since it is difficult to reliably predict which currencies will have arbitrage opportunities in the often volatile markets, you would need to study the currencies for trends of potential arbitrage.\nAs it is, this method suffers no transaction risk whatsoever; your coins operate in the exchanges’ systems and are as instant as the exchange allows them to. The biggest drawback this method has is that the volatility risk might eliminate your gains from arbitrage. Requiring 2x the money involved in the transaction is not as big a disadvantage as it may seem, since current arbitrage opportunities are small.\nPros:\n No transaction risk. No transaction fees.  Cons:\n The Volatility risk. Requires much more money on hands. Idle coins waiting for opportunity earn no return for you.  If you are keen on taking transaction risks, you might as well perform the second arbitraging method.\nMethod 2: Moving coins This is what everybody thinks when they first learn about crypto currency arbitrage. You buy cheaply on Exchange A and then you sell it at a higher price on Exchange B. There’s not much more than that, and that is why the barrier of entry is so low for this method; which means more arbitrageurs, and less opportunities for everyone.\nTransaction risk is the biggest here, as explained above there’s no guarantee that certain exchanges will allow you to make use of your funds as readily as you would like to. Also, this does not mitigate the volatility risk you will incur by holding cryptocurrencies. This may change though in the future with cryptocurrencies as they stabilize.\nPros:\n It’s relatively easy to do. No transaction fees. No idle coins waiting for opportunity.  Cons:\n It’s easy enough for everyone to do. Transaction risk. Volatility risk. Transaction fees.  Method 3: Triple Arbitrage Sometimes it is not a matter of buying apples at a low price and selling them at a premium elsewhere. Sometimes you buy apples to exchange for oranges and then exchange those oranges for bananas, which you then trade for apples again. Triple arbitrage takes advantage of price discrepancies amongst different trade-able objects. In this case it’s with the many currencies on major exchanges.\nIt is unlikely (and much riskier) that anyone performs triple arbitrage without automated means, the barrier of entry is also much higher than the two previous methods with a single trading pair.\nPros:\n You can combine it with the two previous methods. Less likely for common arbitrageurs to exploit these methods mean more opportunities. If an exchange is particularly inefficient you might be able to do everything in one place.  Cons:\n Unfeasible without automated means. Doing this with the “moving coins” method increases transaction risks \u0026amp; fees. Doing this with the “waiting coins” method requires more capital. More trading fees.  While you might be able to use more than three pairs to trade, the possibilities of doing so diminish due to trading fees. We should carry on to the next question, which mitigates a risk that every method above has.\nMethod 4: Staying in stable currency You might have read the term “going long”, which is trader jargon for staying in a currency or investment no matter the short-term performance. If you believe bitcoin will continue to acquire value in the future, you are thinking in this same mindset – your investment is its own holdings, rather than taking advantage of a market discrepancy.\nBut in the volatile world of crypto currency arbitrage, you might not necessarily want to go long with Bitcoin depending on your feelings of the market. The volatility for the five year old currency is high and any gains that you acquire from arbitrage are not stable. A mere ten percent gain or loss on the value of Bitcoin could double or destroy your gains from the arbitrage methods listed earlier in this article.\nBy staying in a stable, government-backed currency such as the US dollar, you can meanwhile get into an exchange, trade for your profit, and get out. Although you’ll be leaving the cryptocurrency market and entering charted, safer waters, there will be much more scrutiny on fees, waiting periods and other financial regulations\nPros:\n You can incorporate this philosophy into every method. Much more stable than playing the market.  Cons:\n No opportunity for short selling and gains. Fees from exchanges to and from fiat currencies  There surely are variations and increasingly complex ways of conducting arbitrage, for instance instead of triple-arbitrage, quadruple and quintuple-arbitrage. These ways exposed here, and their resulting combinations, should be enough to describe what’s accessible to most bitcoin traders worldwide.\nConclusions These methods listed above are, at a glance, how to approach arbitrage with Bitcoin and other cryptocurrencies on the market. In my opinion, the landscape for arbitraging is not easy – Take it from someone who thought it would be profitable and went through the effort of developing software exactly for arbitrage. I could be proven wrong, but I would need to see data to believe it; just as I needed data to conclude the great risk of arbitrage at this time.\n","date":1411887718,"description":"","dir":"posts/","expirydate":-62135596800,"fuzzywordcount":2100,"keywords":null,"kind":"page","lang":"en","lastmod":1411887718,"objectID":"19f7351f5ac2887f17111393a8cda8a0","permalink":"https://codingo.com/posts/2014-09-28-performing-arbitrage-bitcoin/","publishdate":"2014-09-28T17:01:58+10:00","readingtime":10,"relpermalink":"/posts/2014-09-28-performing-arbitrage-bitcoin/","section":"posts","summary":"What is Arbitrage? Put simply, arbitrage is buying something at a low price and selling more or less immediately at a higher price through a different market. There are many kinds of arbitrage, but all of them boil more or less to the same goal: Capitalizing on a price difference for economic gain.\nArbitrage is everywhere in our global economy and lots of commercial transactions depend upon it and utilize it.","tags":["bitcoin"],"title":"How do you perform arbitrage with Bitcoins?","type":"posts","url":"https://codingo.com/posts/2014-09-28-performing-arbitrage-bitcoin/","weight":0,"wordcount":2065},{"authors":null,"categories":null,"content":"Recently more and more alt coins have decided to integrate a proof of stake system over the traditional proof of work system used by Bitcoin and Litecoin. But why, one may ask? Frankly, the proof of work system is not perfect. A cryptocurrency without proof of stake doesn’t just lack an incentive for users to continue holding on to their coins, but is also susceptible to a 51 percent attack if one party controls a majority of the total mining output. To solve help these problems, some cryptocurrencies, such as NXT, have implemented a 100 percent proof of stake system. Other currencies, such as Dogecoin, have implemented elements of proof of stake to take advantage of its benefits.\nWhat is Proof of Stake? Like a proof of work system, proof of stake allows miners to verify block chain transactions and solve puzzles in order to receive rewards – which ultimately are the coins you receive. In a proof of work system, miners complete difficult puzzles using the hashing power of their computer equipment and are rewarded based on how quickly they can solve the mathematical puzzles. The faster the hashrate, the more coins they will receive. Mining in a proof of stake system however is not completely determined by one’s hashrate (or computing power,) but instead by how much of the currency they currently own. If someone owns five percent of the currency, then they can mine five percent of the blocks.\nIn proof of stake the “mining” that goes on doesn’t necessarily refer to the mining done on currencies such as Bitcoin with powerful computing equipment. Instead, “mining” occurs when transactions take place within the currency, generating fees. These fees are more likely to go to the users with greater stakes in the currency. This creates an incentive for miners to hold onto their coins instead of trading them away as soon as they’re earned.\nHow proof of take can solve the flaws of proof of work Although more merchants are accepting Bitcoin, the price has yet to recover from its peak late last year. Though there are many reasons for this, one in particular is because most of these merchants convert their Bitcoins into dollars or other fiat currencies as soon as they earn them. This creates a downward pressure on the price of Bitcoin due to the constant selling of currency that exist the Bitcoin economy. In the proof of work system there is no incentive for merchants to keep Bitcoins and due to its volatile nature many merchants are scared to hold them for longer periods of time. The proof of stake system however gives people an incentive to keep their coins rather than selling right away.\nProof of stake can also solve the very critical risk of 51 percent attacks that haunt both the Bitcoin and other cryptocurrency community. Earlier this summer the Ghash.io pool, controlled by CEX.io, came dangerously close to reaching the 51 percent attack potential. While the company did eventually reduce its network hashing rate and issued a press release noting its intentions to prevent a 51 percent attack, proof of stake would permanently prevent this issue from ever occurring. This is because it is not only very difficult to attain, but would do more harm to the causer of the 51 percent attack than to the rest of the network.\nThe advantages of a mix of both systems The proof of stake system is by no means perfect. By giving people an incentive to save their coins it also gives them an incentive to hoard and never spend any coins. This in turn lowers the overall transaction volume, which can hurt the price of the currency as well. Ultimately there must be a healthy median between these two systems that minimizes the flaws of both and maximizes their advantages. But will a currency like Bitcoin ever adopt a proof of stake system? Probably not. This is because changing anything in the Bitcoin protocol as dramatic as a new proof of stake system would make the currency seem weak and unguided. But it is very likely in the future that other currencies will adopt a mixed system between the two methods, much like Dogecoin.\n","date":1411110118,"description":"","dir":"posts/","expirydate":-62135596800,"fuzzywordcount":800,"keywords":null,"kind":"page","lang":"en","lastmod":1411110118,"objectID":"b1f22103c6bc6db7f42e9a9eccfe413a","permalink":"https://codingo.com/posts/2014-09-19-proof-of-stake-advantages/","publishdate":"2014-09-19T17:01:58+10:00","readingtime":4,"relpermalink":"/posts/2014-09-19-proof-of-stake-advantages/","section":"posts","summary":"Recently more and more alt coins have decided to integrate a proof of stake system over the traditional proof of work system used by Bitcoin and Litecoin. But why, one may ask? Frankly, the proof of work system is not perfect. A cryptocurrency without proof of stake doesn’t just lack an incentive for users to continue holding on to their coins, but is also susceptible to a 51 percent attack if one party controls a majority of the total mining output.","tags":["bitcoin"],"title":"Proof of Stake – How does it work and what are the advantages?","type":"posts","url":"https://codingo.com/posts/2014-09-19-proof-of-stake-advantages/","weight":0,"wordcount":702},{"authors":null,"categories":null,"content":"Satoshi Nakamoto first published their paper on Bitcoin back in 2009, but it didn’t reach real mainstream popularity until recently. Only the users who understand the highly technical mechanics of Bitcoin invested their time in the technology during 2009-13 intermission period. In February of 2013 Bitcoin, and soon cryptocurrencies in general, finally entered the public consciousness. Despite being a four year old technology, many of the core features of the Bitcoin protocol were not polished in any capacity, let alone ready for mass public consumption. The Bitcoin wallet is an excellent example of one such component. Since that first popularity explosion, much expertise has gone into designing and refining the Bitcoin wallet. Today we will be taking a look at the differences in functionality of the three types of wallets as well as comparing their security and usefulness. These types of wallets suit users depending on the way people wish to access their funds, as well as who they want to entrust the long-term security of their accounts.\nWhat is a Bitcoin wallet? For a majority of Bitcoin users, the first cryptocoin interface they encounter is the wallet. Much like the physical wallet you keep in your back pocket, your Bitcoin wallet serves to store currency that you mine, purchase, or receive from others. Your digital wallet functions in a very similar way to its real life counterpart – however,there is one key difference: Cryptocurrencies are exchanged using addresses not unlike email, with the exception that your Bitcoin addresses are generated randomly on your behalf. Your wallet can hold more Bitcoin addresses then you could ever use, and each address functions as a separate place for you to send and receive money. Think of each address as a separate compartment in your wallet, or as the various different bank cards you own that each have their own individual balances. These addresses are where all transactions are directed, whether they’re yours, or run by the companies you use to collectively hold your money.\nOffline Wallets In the beginning of Bitcoin, there were offline wallets. These wallets operate in the “traditional” wallet style – that is, with all of your wallet data stored only locally on your own personal machine and not in need of a constant internet connection. You do need to be on the internet to receive and send your currency, but you don’t always have to be online. Initial Bitcoin commerce wasn’t possible without at least a basic wallet, and the offline wallet was the simplest solution for early adopters to code up and release to the public, including the one Nakamoto published. As such, offline wallet apps are readily available on both the desktop and mobile platforms. It should also be noted that any damage to your wallet data can quickly render it corrupted, which means your keys (and your cash) are unrecoverable without a backup. This limitation drives fear into the heart of many Bitcoin enthusiasts, some of which can barely keep track of their physical keys, let alone their digital ones. As a result, it’s important to keep many copies of your wallet information secure and safely stored away, even if just on a USB drive behind a safe.\nOnline Wallets When hosted, or online, wallets entered the scene, they changed the entire Bitcoin wallet paradigm. Instead of keeping all your wallet information stored locally, a sensible online wallet stores an encrypted copy of your wallet data on their servers with a password you choose. When you want to access your wallet, your data is downloaded and decrypted locally. After you have completed your transactions, the hosted wallet uploads your encrypted wallet to back servers the hosted wallet controls. This relieves the user of the responsibility of backing up their wallet as well as “syncing” their wallet across their devices — all while keeping the users keys protected from abuse on the company’s servers by only doing encryption and decryption operations on the “client side”, aka locally on your machine. Online wallets are most popular on web browser centric and mobile devices, but the nature of this type of wallet makes easy access possible on any networked system. IT also ensure you don’t have to run your computer all day as a node to keep up with transaction activity on the Bitcoin network, and can let your provider handle all the trouble. However, if anything were to happen to the company you use to store your currency, then you’d be out of luck unless they offer a backup service to store copies of your wallet offline.\nDeterministic Wallets A third type of wallet exists exclusive of the other two: The deterministic wallet. The previous two types of wallet operate as variations of each other, where the online and offline wallets manage the same wallet data that is located either on your machine or is shifted to someone else’s. On the other hand, the deterministic wallet generates master root key (consumable by humans in the form of a twelve word passphrase) and hands it to the user. The root key is the only information the user is required to keep track of. Once the root key in input, the deterministic wallet uses advanced cryptographic algorithms to derive new private keys, or addresses, from the original root key. Because the wallet is creating new addresses using the same formula with the same initial conditions each time, all addresses are said to be predetermined from the root key. This handy fact allows you the option to store your wallet backup securely in your brain (via memorization) without the need for the key to exist digitally anywhere — all while still being able to access funds in any of the derived addresses. The portability of this system grants deterministic wallets secure interfaces on your desktop, your mobile phone, and your web browser. This of course still depends on you remembering a very unique kind of password that may be difficult to recall, or if written down can pose a security threat.\nWhich should you choose? Since the invention of the Bitcoin protocol users and developers alike have worked to shape the function and feel of cryptocoin wallets. Today wallets are more robust, packed full of features, and offer security that we couldn’t imagine during the infancy of Bitcoin. Wallets come in many forms and serve many purposes. We’ll share with you next how most popular wallets available compare, and what you can do to pick the one that suits you.\n","date":1357110118,"description":"","dir":"posts/","expirydate":-62135596800,"fuzzywordcount":1100,"keywords":null,"kind":"page","lang":"en","lastmod":1357110118,"objectID":"43b79324acefd36ccaa41614cb3f5dfb","permalink":"https://codingo.com/posts/2013-01-02-bitcoin-wallet-differences/","publishdate":"2013-01-02T17:01:58+10:00","readingtime":6,"relpermalink":"/posts/2013-01-02-bitcoin-wallet-differences/","section":"posts","summary":"Satoshi Nakamoto first published their paper on Bitcoin back in 2009, but it didn’t reach real mainstream popularity until recently. Only the users who understand the highly technical mechanics of Bitcoin invested their time in the technology during 2009-13 intermission period. In February of 2013 Bitcoin, and soon cryptocurrencies in general, finally entered the public consciousness. Despite being a four year old technology, many of the core features of the Bitcoin protocol were not polished in any capacity, let alone ready for mass public consumption.","tags":["bitcoin"],"title":"Bitcoin Wallets: What are the differences between them?","type":"posts","url":"https://codingo.com/posts/2013-01-02-bitcoin-wallet-differences/","weight":0,"wordcount":1080},{"authors":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"search/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"4e4f919455da0987a141b4ef412aeb48","permalink":"https://codingo.com/search/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/","section":"","summary":"","tags":null,"title":"Search","type":"search","url":"https://codingo.com/search/","weight":0,"wordcount":0}]