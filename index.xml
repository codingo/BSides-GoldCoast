<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Codingo - Ethical Hacking and Bug Bounty Advice</title><link>https://codingo.com/</link><description>Recent content on Codingo - Ethical Hacking and Bug Bounty Advice</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 17 Sep 2020 17:01:58 +1000</lastBuildDate><atom:link href="https://codingo.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Codingo's Vulnerability Disclosure Policy</title><link>https://codingo.com/security/</link><pubDate>Fri, 12 Mar 2021 23:42:04 +1000</pubDate><guid>https://codingo.com/security/</guid><description/></item><item><title>Everything you need to know about FFUF</title><link>https://codingo.com/posts/2020-08-29-everything-you-need-to-know-about-ffuf/</link><pubDate>Thu, 17 Sep 2020 17:01:58 +1000</pubDate><guid>https://codingo.com/posts/2020-08-29-everything-you-need-to-know-about-ffuf/</guid><description>Summary This guide is a large summary of the information security tool, FFUF. This is also paired with a video companion guide, shown below:
Table of Contents Other Sources / Credit Before we start What is FFUF, and What is it used for? Who What Where Why Command Line Driven Applications Installation Install from Source Upgrading from Source Kali Linux APT Repositories Other Locations - Debian Unstable / SNAP, etc' Basic Usage What is Directory Brute Forcing?</description></item><item><title>Decompiling C# by Example with Cracknet</title><link>https://codingo.com/posts/2017-07-25-decompiling-csharp-by-example-with-cracknet/</link><pubDate>Tue, 25 Jul 2017 17:01:58 +1000</pubDate><guid>https://codingo.com/posts/2017-07-25-decompiling-csharp-by-example-with-cracknet/</guid><description>What is Cracknet? As a part of the SecTalks May CTF I built a .Net reverse engineering challenge, Cracknet. I&amp;rsquo;ve since made this available on Github, here.
Although it&amp;rsquo;s possible to complete this challenge by bypassing a JMP instruction in assembly the intention of this challenge was to introduce participants to decompiling .Net applications by patching the application.
Exploring CrackNet functionality When you first open CrackNet you&amp;rsquo;re presented with the following:</description></item><item><title>Understanding Integer Overflows - CrikeyCon 2017, Impossible Math Writeup</title><link>https://codingo.com/posts/2017-03-08-ctf-writeup-crikeycon-2017-impossiblemath/</link><pubDate>Wed, 08 Mar 2017 17:10:58 +1000</pubDate><guid>https://codingo.com/posts/2017-03-08-ctf-writeup-crikeycon-2017-impossiblemath/</guid><description>Category: Coding Points: 400 Solves: 7 Description: ctf.crikeycon.com:43981 Enumeration Before doing anything else on the host since we were provided with an unual port and address I attempted to ncat to it, receiving the following:
Identifying the core problem Since the math is impossible there’s likely a trick here. With that in mind I figure we need to overload an operator (integer overflow) and try passing a large number as input:</description></item><item><title>CrikeyCon 2017 - Fast Math Writeup</title><link>https://codingo.com/posts/2017-03-08-crikeycon-2017-fastmath/</link><pubDate>Wed, 08 Mar 2017 17:01:58 +1000</pubDate><guid>https://codingo.com/posts/2017-03-08-crikeycon-2017-fastmath/</guid><description>Category: Coding Points: 300 Solves: 14 Description: crikeyconctf.dook.biz:23776 Enumeration Before doing anything else on this host I attempted to connect to it, receiving the following:
The time between being presented with the challenge and receiving a timeout was a mere two seconds. Although handy with a calculator this wouldn’t be possible without a script/bot. I also noted that the response and timing to answer didn’t change on a second connection, but the base operator did.</description></item><item><title>How do you perform arbitrage with Bitcoins?</title><link>https://codingo.com/posts/2014-09-28-performing-arbitrage-bitcoin/</link><pubDate>Sun, 28 Sep 2014 17:01:58 +1000</pubDate><guid>https://codingo.com/posts/2014-09-28-performing-arbitrage-bitcoin/</guid><description>What is Arbitrage? Put simply, arbitrage is buying something at a low price and selling more or less immediately at a higher price through a different market. There are many kinds of arbitrage, but all of them boil more or less to the same goal: Capitalizing on a price difference for economic gain.
Arbitrage is everywhere in our global economy and lots of commercial transactions depend upon it and utilize it.</description></item><item><title>Proof of Stake – How does it work and what are the advantages?</title><link>https://codingo.com/posts/2014-09-19-proof-of-stake-advantages/</link><pubDate>Fri, 19 Sep 2014 17:01:58 +1000</pubDate><guid>https://codingo.com/posts/2014-09-19-proof-of-stake-advantages/</guid><description>Recently more and more alt coins have decided to integrate a proof of stake system over the traditional proof of work system used by Bitcoin and Litecoin. But why, one may ask? Frankly, the proof of work system is not perfect. A cryptocurrency without proof of stake doesn’t just lack an incentive for users to continue holding on to their coins, but is also susceptible to a 51 percent attack if one party controls a majority of the total mining output.</description></item><item><title>Bitcoin Wallets: What are the differences between them?</title><link>https://codingo.com/posts/2013-01-02-bitcoin-wallet-differences/</link><pubDate>Wed, 02 Jan 2013 17:01:58 +1000</pubDate><guid>https://codingo.com/posts/2013-01-02-bitcoin-wallet-differences/</guid><description>Satoshi Nakamoto first published their paper on Bitcoin back in 2009, but it didn’t reach real mainstream popularity until recently. Only the users who understand the highly technical mechanics of Bitcoin invested their time in the technology during 2009-13 intermission period. In February of 2013 Bitcoin, and soon cryptocurrencies in general, finally entered the public consciousness. Despite being a four year old technology, many of the core features of the Bitcoin protocol were not polished in any capacity, let alone ready for mass public consumption.</description></item></channel></rss>