<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>reverse-engineering on Codingo - Ethical Hacking and Bug Bounty Advice</title><link>https://codingo.com/tags/reverse-engineering/</link><description>Recent content in reverse-engineering on Codingo - Ethical Hacking and Bug Bounty Advice</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><lastBuildDate>Tue, 25 Jul 2017 17:01:58 +1000</lastBuildDate><atom:link href="https://codingo.com/tags/reverse-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>Decompiling C# by Example with Cracknet</title><link>https://codingo.com/posts/2017-07-25-decompiling-csharp-by-example-with-cracknet/</link><pubDate>Tue, 25 Jul 2017 17:01:58 +1000</pubDate><guid>https://codingo.com/posts/2017-07-25-decompiling-csharp-by-example-with-cracknet/</guid><description>What is Cracknet? As a part of the SecTalks May CTF I built a .Net reverse engineering challenge, Cracknet. I&amp;rsquo;ve since made this available on Github, here.
Although it&amp;rsquo;s possible to complete this challenge by bypassing a JMP instruction in assembly the intention of this challenge was to introduce participants to decompiling .Net applications by patching the application.
Exploring CrackNet functionality When you first open CrackNet you&amp;rsquo;re presented with the following:</description></item></channel></rss>